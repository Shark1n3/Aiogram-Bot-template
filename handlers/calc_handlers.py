from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.reply import menu
from states.main_states import CalcStates
import math

async def start(m: types.Message):
    await m.answer('–ü—Ä–∏–≤–µ—Ç!üëã\n–≠—Ç–æ –±–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–∂–∏—Ç—å/–≤—ã—á–µ—Å—Ç—å/—É–º–Ω–æ–∂–∏—Ç—å/–ø–æ–¥–µ–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –µ–≥–æ. –£ –º–µ–Ω—è —Ç–∞–∫–∂–µ –µ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —É–∑–Ω–∞—Ç—å –æ –Ω–∏—Ö —Ç—ã –º–æ–∂–µ—à—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–º–æ—â—å"\n–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=menu)

async def help(m: types.Message):
    await m.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, –¥–µ–ª–µ–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ) –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –±–æ—Ç–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å.\n\n–¢–∞–∫–∂–µ –±–æ—Ç –º–æ–∂–µ—Ç —Ç–∞–∫–∏–º –∂–µ –æ–±—Ä–∞–∑–æ–º –≤–æ–∑–≤–æ–¥–∏—Ç—å –≤ —Å—Ç–µ–ø–µ–Ω—å —á–∏—Å–ª–æ –∏ –∏—Å–∫–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —á–∏—Å–ª–∞, –ø—Ä–∏–º–µ—Ä—ã:\n5^2 - —Ü–∏—Ü—Ä–∞ 5 –≤–æ –≤—Ç–æ—Ä—É—é —Å—Ç–µ–ø–µ–Ω—å\n25%2500 - 25% –æ—Ç 2500')

async def koren(m: types.Message, state: FSMContext):
    await m.answer('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∏–∑–≤–ª–µ—á—å –∫–æ—Ä–µ–Ω—å')
    await CalcStates.first()

async def koren_answer(m: types.Message, state: FSMContext):
    if not m.text.isdigit():
        await m.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        return
    num = int(m.text)
    result = math.sqrt(num)
    await m.answer(f'–û—Ç–≤–µ—Ç: {round(result, 2)}')
    await state.update_data(koren_result=result)
    await state.finish()

async def kvadr(m: types.Message, state: FSMContext):
    cancel = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel')]])
    await m.answer('–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ä–µ—à–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è *ax^2+bx+c=0*\n–ß—Ç–æ–±—ã –±–æ—Ç —Å–º–æ–≥ –µ–≥–æ —Ä–µ—à–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç—ã a, b, c –≤–æ—Ç —Ç–∞–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n–ü—Ä–∏–º–µ—Ä: 2, -5, 1, —ç—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —É—Ä–∞–≤–Ω–µ–Ω–∏—é 2x^2-5x+1=0\n–ï—Å–ª–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ 2 –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç–∞, –≤–º–µ—Å—Ç–æ —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–≤–µ–¥–∏ 0', reply_markup=cancel, parse_mode="Markdown")
    await CalcStates.last()

async def kvadr_answer(m: types.Message, state: FSMContext):
    nums = str(m.text).replace(',', ' ').split()
    print(nums)
    if len(nums) < 3:
        await m.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç—ã')
        return
    for n in nums:
        if not n.isdigit():
            if not n.__contains__('-'):
                await m.answer('–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
                return
    d = (int(nums[1]) ** 2) - 4*(int(nums[0] * int(nums[2])))
    if d < 0:
        await m.answer('–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, —Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')
        await state.finish()
    x1 = (0 - int(nums[1]) + math.sqrt(float(d))) / 2 * int(nums[0])
    x2 = (0 - int(nums[1]) - math.sqrt(float(d))) / 2 * int(nums[0])
    await m.answer(f'–û—Ç–≤–µ—Ç:\nD = {d}\nX1 = {x1}\nX2 = {x2}')
    await state.finish()


async def answer_calls(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text('–û—Ç–º–µ–Ω—è—é...')
    await state.finish()

async def calculating_simple(message: types.Message):
    try:
        if message.text.__contains__('^'):
            nums = str(message.text).replace('^', ' ').split()
            if not nums[0].isdigit():
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            else:
                res = int(str(nums[0])) ** int(str(nums[1]))
                await message.answer(f'–û—Ç–≤–µ—Ç: {res}')
        elif message.text.__contains__('%'):
            nums = str(message.text).replace('%', ' ').split()
            result = int(str(nums[1])) / 100 * int(str(nums[0]))
            await message.answer(f'–û—Ç–≤–µ—Ç: {str(round(result))}')
        else:
            result = eval(str(message.text).replace(' ', ''))
            await message.answer(f'{message.text}={result}')
    except:
        await message.answer('–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ')
